AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for a highly available, containerized full-stack Java web application
  on Amazon ECS (Fargate) with a secure CI/CD pipeline.

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the first public subnet.
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the second public subnet.
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for the first private subnet.
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for the second private subnet.
  ApplicationPort:
    Type: Number
    Default: 8080
    Description: Port on which the application container listens.
  AllowedGithubRepo:
    Type: String
    Default: Moadams/CICDApplication
    Description: Allowed Github Repo
  AllowedGithubBranch:
    Type: String
    Default: refs/heads/main
    Description: Allowed Github Branch

Resources:
  # ------------------------------------------------------------#
  #  VPC and Networking                                         #
  # ------------------------------------------------------------#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-IGW'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PublicSubnet1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PublicSubnet2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1Cidr
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PrivateSubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2Cidr
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PrivateSubnet2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PublicRouteTable'

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-NatGatewayEIP1'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-NatGateway1'

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-NatGatewayEIP2'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-NatGateway2'

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PrivateRouteTable1'

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'cicdlab-PrivateRouteTable2'

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

#   # ------------------------------------------------------------#
#   #  Security Groups                                            #
#   # ------------------------------------------------------------#
#   AlbSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Security group for the ALB.
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 80
#           ToPort: 80
#           CidrIp: 0.0.0.0/0
#       Tags:
#         - Key: Name
#           Value: !Sub 'cicdlab-ALB-SG'

#   EcsSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Security group for ECS tasks.
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: !Ref ApplicationPort
#           ToPort: !Ref ApplicationPort
#           SourceSecurityGroupId: !Ref AlbSecurityGroup
#       Tags:
#         - Key: Name
#           Value: !Sub 'cicdlab-ECS-SG'
  
#   # # ------------------------------------------------------------#
#   # #  ECS & Fargate                                              #
#   # # ------------------------------------------------------------#
#   EcsCluster:
#     Type: AWS::ECS::Cluster
#     Properties:
#       ClusterName: !Sub 'cicdlab-Cluster'
#       Tags:
#         - Key: Name
#           Value: !Sub 'cicdlab-Cluster'

#   EcrRepository:
#     Type: AWS::ECR::Repository
#     Properties:
#       RepositoryName: !Sub 'cicdlab-repo'
#       ImageScanningConfiguration:
#         ScanOnPush: true
#       Tags:
#         - Key: Name
#           Value: !Sub 'cicdlab-repo'
#       RepositoryPolicyText:
#         Version: '2008-10-17'
#         Statement:
#           - Sid: AllowAccountAccess
#             Effect: Allow
#             Principal:
#               AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
#             Action:
#               - ecr:GetDownloadUrlForLayer
#               - ecr:BatchGetImage
#               - ecr:BatchCheckLayerAvailability
#               - ecr:PutImage
#               - ecr:InitiateLayerUpload
#               - ecr:UploadLayerPart
#               - ecr:CompleteLayerUpload
  
#   GitHubOidcProvider:
#     Type: AWS::IAM::OIDCProvider
#     Properties:
#       Url: https://token.actions.githubusercontent.com
#       ClientIdList:
#         - sts.amazonaws.com
#       ThumbprintList:
#         - 7560d6f40fa55195f740ee2b1b7c0b4836cbe103
#       Tags:
#         - Key: Name
#           Value: !Sub cicdlab-GitHubOidcProvider

#   GitHubActionsRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: !Sub cicdlab-GitHubActionsRole
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Federated: !Ref GitHubOidcProvider
#             Action: sts:AssumeRoleWithWebIdentity
#             Condition:
#               StringLike:
#                 token.actions.githubusercontent.com:sub: !Sub repo:${AllowedGithubRepo}:ref:${AllowedGithubBranch}
#               StringEquals:
#                 token.actions.githubusercontent.com:aud: sts.amazonaws.com
#       Path: "/"
#       Policies:
#         - PolicyName: ECRPush
#           PolicyDocument:
#             Version: 2012-10-17
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - ecr:GetAuthorizationToken
#                 Resource: "*"
#               - Effect: Allow
#                 Action:
#                   - ecr:InitiateLayerUpload
#                   - ecr:UploadLayerPart
#                   - ecr:CompleteLayerUpload
#                   - ecr:PutImage
#                   - ecr:BatchCheckLayerAvailability
#                 Resource: !GetAtt EcrRepository.Arn

#         - PolicyName: S3DeploymentUpload
#           PolicyDocument:
#             Version: 2012-10-17
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - s3:PutObject
#                   - s3:PutObjectAcl
#                 Resource: !Sub arn:aws:s3:::${CodePipelineBucket}/*


#   EcsTaskExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: !Sub 'cicdlab-ECSTaskExecutionRole'
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: [ecs-tasks.amazonaws.com]
#             Action: sts:AssumeRole
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

#   EcsTaskRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: !Sub 'cicdlab-TaskRole'
#       AssumeRolePolicyDocument:
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: [ecs-tasks.amazonaws.com]
#             Action: ['sts:AssumeRole']
#       Policies:
#         - PolicyName: EcsTaskPolicy
#           PolicyDocument:
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - 's3:GetObject'
#                   - 's3:ListBucket'
#                 Resource: '*'

#   CloudWatchLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub '/ecs/cicdlab'

#   EcsTaskDefinition:
#     Type: AWS::ECS::TaskDefinition
#     Properties:
#       Family: !Sub 'cicdlab-task-def'
#       Cpu: '256'
#       Memory: '512'
#       NetworkMode: awsvpc
#       RequiresCompatibilities:
#         - FARGATE
#       ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
#       TaskRoleArn: !GetAtt EcsTaskRole.Arn
#       ContainerDefinitions:
#         - Name: !Sub 'cicdlab-container'
#           Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest'
#           PortMappings:
#             - ContainerPort: !Ref ApplicationPort
#           LogConfiguration:
#             LogDriver: awslogs
#             Options:
#               awslogs-group: !Ref CloudWatchLogGroup
#               awslogs-region: !Ref AWS::Region
#               awslogs-stream-prefix: ecs

#   EcsService:
#     Type: AWS::ECS::Service
#     DependsOn:
#       - AlbListener
#     Properties:
#       Cluster: !Ref EcsCluster
#       ServiceName: !Sub 'cicd-service'
#       TaskDefinition: !Ref EcsTaskDefinition
#       LaunchType: FARGATE
#       DesiredCount: 1
#       DeploymentController:             
#         Type: CODE_DEPLOY
#       NetworkConfiguration:
#         AwsvpcConfiguration:
#           Subnets:
#             - !Ref PrivateSubnet1
#             - !Ref PrivateSubnet2
#           SecurityGroups:
#             - !Ref EcsSecurityGroup
#           AssignPublicIp: DISABLED
#       LoadBalancers:
#         - ContainerName: !Sub 'cicdlab-container'
#           ContainerPort: !Ref ApplicationPort
#           TargetGroupArn: !Ref TargetGroupBlue
#       Tags:
#         - Key: Name
#           Value: !Sub 'cicd-service'

#   # # ------------------------------------------------------------#
#   # #  Application Load Balancer (ALB)                            #
#   # # ------------------------------------------------------------#
#   Alb:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       Scheme: internet-facing
#       Subnets:
#         - !Ref PublicSubnet1
#         - !Ref PublicSubnet2
#       SecurityGroups:
#         - !Ref AlbSecurityGroup
#       Tags:
#         - Key: Name
#           Value: !Sub 'cicdlab-ALB'

#   TargetGroupBlue:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: !Sub "cicdlab-tg-blue"
#       Port: 8080
#       Protocol: HTTP
#       VpcId: !Ref VPC
#       TargetType: ip
#       HealthCheckIntervalSeconds: 30
#       HealthCheckPath: /
#       HealthCheckPort: traffic-port
#       Matcher:
#         HttpCode: 200-399

#   TargetGroupGreen:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: !Sub "cicdlab-tg-green"
#       Port: 80
#       Protocol: HTTP
#       VpcId: !Ref VPC
#       TargetType: ip
#       HealthCheckPath: /
#       Matcher:
#         HttpCode: 200-399


#   AlbListener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       LoadBalancerArn: !Ref Alb
#       Port: 80
#       Protocol: HTTP
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref TargetGroupBlue


#   # Test listener
#   AlbTestListener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref TargetGroupGreen
#       LoadBalancerArn: !Ref Alb
#       Port: 9000                  
#       Protocol: HTTP
  
#   # ------------------------------------------------------------#
#   #  CI/CD Pipeline and CodeDeploy                              #
#   # ------------------------------------------------------------#
#   CodePipelineBucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: !Sub 'codepipeline-cicdlab-${AWS::AccountId}'
#       VersioningConfiguration:
#         Status: Enabled
#       Tags:
#         - Key: Name
#           Value: !Sub 'codepipeline-cicdlab-artifact-store'

  
#   CodeDeployServiceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: !Sub 'cicdlab-CodeDeployRole'
#       AssumeRolePolicyDocument:
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: [codedeploy.amazonaws.com]
#             Action: ['sts:AssumeRole']
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

#   CodeDeployApplication:
#     Type: AWS::CodeDeploy::Application
#     Properties:
#       ApplicationName: !Sub 'cicdlab-App'
#       ComputePlatform: ECS

#   CodeDeployDeploymentGroup:
#     Type: AWS::CodeDeploy::DeploymentGroup
#     Properties:
#       ApplicationName: !Ref CodeDeployApplication
#       DeploymentGroupName: !Sub 'cicdlab-DG'
#       DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
#       ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
#       AutoRollbackConfiguration:
#         Enabled: true
#         Events:
#           - DEPLOYMENT_FAILURE
#       DeploymentStyle:
#         DeploymentOption: WITH_TRAFFIC_CONTROL
#         DeploymentType: BLUE_GREEN
#       ECSServices:
#         - ClusterName: !Ref EcsCluster
#           ServiceName: !GetAtt EcsService.Name
#       LoadBalancerInfo:
#         TargetGroupPairInfoList:
#           - TargetGroups:
#               - Name: cicdlab-tg-blue
#               - Name: cicdlab-tg-green
#             ProdTrafficRoute:
#               ListenerArns:
#                 - !Ref AlbListener
#             TestTrafficRoute:
#               ListenerArns:
#                 - !Ref AlbTestListener
#       BlueGreenDeploymentConfiguration:   
#         TerminateBlueInstancesOnDeploymentSuccess:
#           Action: TERMINATE
#           TerminationWaitTimeInMinutes: 5
#         DeploymentReadyOption:
#           ActionOnTimeout: CONTINUE_DEPLOYMENT
  
  
#   EventBridgeRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: events.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: AllowStartPipelineExecution
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action: codepipeline:StartPipelineExecution
#                 Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}

#   EventBridgeRule:
#     Type: AWS::Events::Rule
#     Properties:
#       Name: !Sub 'EcrImagePush-Rule-cicdlab'
#       Description: Triggers CodePipeline on new ECR image push.
#       EventPattern:
#         source:
#           - aws.ecr
#         detail-type:
#           - 'ECR Image Action'
#         detail:
#           repository-name:
#             - !Ref EcrRepository
#           action-type:
#             - 'PUSH'
#           result:
#             - 'SUCCESS'
#           image-tag:
#             - 'latest'
#       Targets:
#         - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}
#           RoleArn: !GetAtt EventBridgeRole.Arn
#           Id: CodePipelineTarget

#   CodePipelineServiceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: !Sub 'cicdlab-CodePipelineRole'
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: codepipeline.amazonaws.com
#             Action: sts:AssumeRole
#       Path: "/"
#       Policies:
#         - PolicyName: CodePipelinePolicy
#           PolicyDocument:
#             Version: 2012-10-17
#             Statement:
#               # S3 permissions for deployment artifacts
#               - Effect: Allow
#                 Action:
#                   - s3:*
#                   - ecs:*
#                   - codedeploy:*
#                 Resource: '*'

#               # ECR read access
#               - Effect: Allow
#                 Action:
#                   - ecr:DescribeImages
#                 Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepository}

#               - Effect: Allow
#                 Action:
#                   - iam:PassRole
#                 Resource: '*'
#                 Condition:
#                   StringEquals:
#                     iam:PassedToService:
#                       - ecs-tasks.amazonaws.com
#                       - codedeploy.amazonaws.com
                

#   CodePipeline:
#     Type: AWS::CodePipeline::Pipeline
#     Properties:
#       Name: !Sub 'cicdlab-Pipeline'
#       RoleArn: !GetAtt CodePipelineServiceRole.Arn
#       ArtifactStore:
#         Type: S3
#         Location: !Ref CodePipelineBucket
#       Stages:
#         # ---------------- Source Stage ----------------
#         - Name: Source
#           Actions:
#             - Name: EcrSource
#               ActionTypeId:
#                 Category: Source
#                 Owner: AWS
#                 Provider: S3
#                 Version: '1'
#               Configuration:
#                 S3Bucket: !Ref CodePipelineBucket
#                 S3ObjectKey: !Sub 'codepipeline-deployment-files.zip'
#                 PollForSourceChanges: false
#               OutputArtifacts:
#                 - Name: SourceArtifact
#               RunOrder: 1
          
          
#         - Name: Deploy
#           Actions:
#             - Name: DeployToECS
#               ActionTypeId:
#                 Category: Deploy
#                 Owner: AWS
#                 Provider: CodeDeployToECS
#                 Version: '1'
#               InputArtifacts:
#                 - Name: SourceArtifact
#               Configuration:
#                 ApplicationName: !Ref CodeDeployApplication
#                 DeploymentGroupName: !Ref CodeDeployDeploymentGroup
#                 TaskDefinitionTemplateArtifact: SourceArtifact
#                 TaskDefinitionTemplatePath: taskdef.json
#                 AppSpecTemplateArtifact: SourceArtifact
#                 AppSpecTemplatePath: appspec.yml
                
#               RunOrder: 1
#   # # Scalable target for the ECS service
#   EcsServiceScalableTarget:
#     Type: AWS::ApplicationAutoScaling::ScalableTarget
#     DependsOn: EcsService
#     Properties:
#       MaxCapacity: 4
#       MinCapacity: 1
#       ResourceId: !Sub service/cicdlab-Cluster/cicd-service 
#       RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
#       ScalableDimension: ecs:service:DesiredCount
#       ServiceNamespace: ecs

#   ApplicationAutoScalingRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: application-autoscaling.amazonaws.com
#             Action: sts:AssumeRole
#       Policies:
#         - PolicyName: ApplicationAutoScalingPolicy
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - iam:PassRole
#                   - ecs:UpdateService
#                   - ecs:DescribeServices
#                   - cloudwatch:PutMetricAlarm
#                   - cloudwatch:DescribeAlarms
#                 Resource: "*"

#   EcsCpuScalingPolicy:
#     Type: AWS::ApplicationAutoScaling::ScalingPolicy
#     Properties:
#       PolicyName: !Sub "cicdlab-ecs-cpu-scaling"
#       PolicyType: TargetTrackingScaling
#       ScalingTargetId: !Ref EcsServiceScalableTarget
#       TargetTrackingScalingPolicyConfiguration:
#         TargetValue: 50.0
#         PredefinedMetricSpecification:
#           PredefinedMetricType: ECSServiceAverageCPUUtilization
#         ScaleInCooldown: 60
#         ScaleOutCooldown: 60


# Outputs:
#   AlbEndpoint:
#     Description: The DNS name of the Application Load Balancer.
#     Value: !GetAtt Alb.DNSName
#     Export:
#       Name: !Sub 'cicdlab-ALB-Endpoint'

#   GitHubOidcRoleArn:
#     Description: Role ARN for GitHub Actions to assume via OIDC to push images
#     Value: !GetAtt GitHubActionsRole.Arn
#     Export:
#       Name: !Sub 'cicdlab-GithubOidcRoleArn'

#   EcrRepositoryUri:
#     Description: The URI of the ECR repository.
#     Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}'
#     Export:
#       Name: !Sub 'cicdlab-ECR-URI'

#   EcsClusterName:
#     Description: The name of the ECS cluster.
#     Value: !Ref EcsCluster
#     Export:
#       Name: !Sub 'cicdlab-ECS-Cluster-Name'

#   EcsServiceName:
#     Description: The name of the ECS service.
#     Value: !Ref EcsService
#     Export:
#       Name: !Sub 'cicdlab-ECS-Service-Name'